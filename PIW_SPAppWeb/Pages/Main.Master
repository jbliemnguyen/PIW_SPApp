<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Main.master.cs" Inherits="PIW_SPAppWeb.Pages.Main" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <link href="../Styles/peoplepickercontrol.css" rel="stylesheet" />
    <link href="../Content/bootstrap.css" rel="stylesheet" media="all" />
    <%--<link href="../Content/bootstrap.css" rel="stylesheet" media="print" />--%>

    <link href="../Styles/offcanvas.css" rel="stylesheet" />
    <link href="../Styles/piw.css?rev=4" rel="stylesheet" />
    <link href="../Styles/jquery-ui.css" rel="stylesheet" />
    <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
</head>
<body>
    <nav class="navbar navbar-fixed-top navbar-inverse hidden-print">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#" style="color: white">PIW</a>
            </div>
            <div id="navbar" class="collapse navbar-collapse">
                <ul class="nav navbar-nav">
                    <li><a href="EditStandardForm.aspx" id="EditStandardFormURL" style="color: white">Create New Standard Form</a></li>
                    <li><a href="EditAgendaForm.aspx" id="EditAgendaFormURL" style="color: white">Create New Agenda Form</a></li>
                    <li><a href="EditDirectPublicationForm.aspx" id="EditDirectPublicationFormURL" style="color: white">Create New Direct Publication Form</a></li>
                </ul>
                <form class="navbar-form navbar-right">
                    <div class="form-group">
                        <input type="text" placeholder="Search Docket Number" class="form-control" />
                    </div>
                    <%--<button type="submit" class="btn btn-success" style="background-color: #337ab7">Search</button>--%>
                    <a href="DocketSearch.aspx" class="btn btn-success" style="background-color: #337ab7">Search</a>
                </form>
            </div>
            <!-- /.nav-collapse -->

        </div>
        <!-- /.container -->
    </nav>
    <!-- /.navbar -->
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-2 sidebar-offcanvas hidden-print" id="sidebar">
                <div class="list-group">
                    <a href="StandardForms.aspx" class="list-group-item" id="StandardFormsURL">Standard Forms</a>
                    <a href="AgendaForms.aspx" class="list-group-item" id="AgendaFormsURL">Agenda Forms</a>
                    <a href="DirectPublicationForms.aspx" class="list-group-item" id="DirectPublicationFormsURL">Direct Publication Forms</a>
                    <a href="PrintReqForms.aspx" class="list-group-item" id="PrintReqFormsURL">Print Requisition Forms</a>
                    <a href="ItemsByPublishedDate.aspx" class="list-group-item" id="ItemsByPublishedDateURL">Items By Published Date</a>
                    
                    
                    <a href="Admin.aspx" class="list-group-item" id="AdminURL">Admin</a>
                </div>
            </div>
            <!--/.sidebar-offcanvas-->


            <div class="col-md-10">
                <asp:ContentPlaceHolder ID="MainContentPlaceHolder" runat="server">
                </asp:ContentPlaceHolder>
            </div>
        </div>
    </div>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="../Scripts/jquery-1.9.1.js"></script>
    <script src="../Scripts/jquery-ui-1.11.4.js"></script>
    <!-- Include all compiled plugins (below), or include individual documentWithFullURLs as needed -->
    <script src="../Scripts/bootstrap.js"></script>
    <script src="../Scripts/json2.min.js" type="text/javascript"></script>
    <script src="../Scripts/jquery.validate.js"></script>
    <script src="../Scripts/peoplepickercontrol.js?rev=5" type="text/javascript"></script>
    <%--<script src="../Scripts/spinner/jquery.spinner.js"></script>--%>
    <script src="../Scripts/jquery.stickytableheaders.min.js"></script>
    <%--no longer use--%>

    <script type="text/javascript">
        // variable used for cross site CSOM calls
        var context;
        // peoplePicker variable needs to be globally scoped as the generated html contains JS that will call into functions of this class
        var peoplePicker;


        //Build the URLs for the links above
        var remoteAppUrl;
        var hostWebURL;
        var link;
        var qs;
        $(document).ready(function () {
            qs = "?" + document.URL.split("?")[1];
            var spAppWebUrl = decodeURIComponent(
                getQueryStringParameter("SPAppWebUrl")
            );

            var spHostUrl = decodeURIComponent(
                getQueryStringParameter("SPHostUrl")
            );

            var SPLanguage = decodeURIComponent(
                getQueryStringParameter("SPLanguage")
            );

            var SPProductNumber = decodeURIComponent(
                getQueryStringParameter("SPProductNumber")
            );

            var SPClientTag = decodeURIComponent(
                getQueryStringParameter("SPClientTag")
            );

            //append the sharepoint current context info into the URL
            $("#sidebar a").each(function () {
                //append the hostURL and appWebURL to the link
                $(this).prop("href", $(this).prop("href") + "?SPHostUrl=" + spHostUrl + "&SPLanguage=" + SPLanguage + "&SPClientTag=" + SPClientTag + "&SPProductNumber=" + SPProductNumber + "&SPAppWebUrl=" + spAppWebUrl);
            });

            $("#navbar a").each(function () {
                //append the hostURL and appWebURL to the link
                $(this).prop("href", $(this).prop("href") + "?SPHostUrl=" + spHostUrl + "&SPLanguage=" + SPLanguage + "&SPClientTag=" + SPClientTag + "&SPProductNumber=" + SPProductNumber + "&SPAppWebUrl=" + spAppWebUrl);
            });


            if ((document.URL.indexOf("EditStandardForm.aspx") > -1) ||
            (document.URL.indexOf("EditAgendaForm.aspx") > -1) ||
            (document.URL.indexOf("EditPrintReqForm.aspx") > -1) ||
            (document.URL.indexOf("EditDirectPublicationForm.aspx") > -1)) {
                SharedEditPageClientCode();
            }


            //Call to method in each page to do further client side programming
            //NOTE: each page must have this method in Main Content Place Holder
            PageClient(spHostUrl, spAppWebUrl, SPLanguage);

        });

        function getQueryStringParameter(paramToRetrieve) {
            var params =
                document.URL.split("?")[1].split("&");
            var strParams = "";
            for (var i = 0; i < params.length; i = i + 1) {
                var singleParam = params[i].split("=");
                if (singleParam[0] == paramToRetrieve)
                    return singleParam[1];
            }
        }

        //this method is called from each editform.aspx page to initiate the peoplepicker control
        function getPeoplePickerInstance(context, spanControl, inputControl, searchDivControl, hiddenControl, webMethodName, variableName, spLanguage) {
            var newPicker;

            //Make a people picker control
            //1. context = SharePoint Client Context object
            //2. $('#spanAdministrators') = SPAN that will 'host' the people picker control
            //3. $('#inputAdministrators') = INPUT that will be used to capture user input
            //4. $('#divAdministratorsSearch') = DIV that will show the 'dropdown' of the people picker
            //5. $('#hdnAdministrators') = INPUT hidden control that will host a JSON string of the resolved users
            newPicker = new CAMControl.PeoplePicker(context, spanControl, inputControl, searchDivControl, hiddenControl, webMethodName);
            // required to pass the variable name here!
            newPicker.InstanceName = variableName;
            // Pass current language, if not set defaults to en-US. Use the SPLanguage query string param or provide a string like "nl-BE"
            // Do not set the Language property if you do not have foreseen javascript resource file for your language
            newPicker.Language = spLanguage;
            // optionally show more/less entries in the people picker dropdown, 4 is the default
            newPicker.MaxEntriesShown = 5;
            // Can duplicate entries be selected (default = false)
            newPicker.AllowDuplicates = false;
            // Show the user loginname
            newPicker.ShowLoginName = true;
            // Show the user title
            newPicker.ShowTitle = true;
            // Set principal type to determine what is shown (default = 1, only users are resolved).
            // See http://msdn.microsoft.com/en-us/library/office/microsoft.sharepoint.client.utilities.principaltype.aspx for more details
            // Set ShowLoginName and ShowTitle to false if you're resolving groups
            newPicker.PrincipalType = 1;
            // start user resolving as of 2 entered characters (= default)
            newPicker.MinimalCharactersBeforeSearching = 2;

            // Hookup everything
            newPicker.Initialize();

            return newPicker;
        }

        function jQueryValidation() {
            $.validator.addMethod("requiredWhenNonDocketed", function (value, element) {
                if ($("#cbIsNonDocket").is(':checked') || $("#cbIsCNF").is(':checked')) {
                    if (!value) {
                        return false;//empty string --> not valid
                    } else {
                        return true;
                    }
                } else {
                    return true;//no need to validate
                }
            }, 'This field is required in Non-Docketed or CNF');

            //
            $.validator.addMethod("requiredWhenDocumentOwnerProvided", function (value, element) {
                var numberOfPeoples = $("#divDocumentOwner").find(".cam-entity-resolved");
                if (numberOfPeoples.length > 0) {
                    if (value) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }, 'This field is required when Document Owner is provided');

            $.validator.addMethod("requiredWhenProgramOfficeDocumentOwnerProvided", function (value, element) {
                var numberOfPeoples = $("#divDocumentOwner").find(".cam-entity-resolved");
                var programOfficeDocumentOwner = $("#ddProgramOfficeDocumentOwner").val();

                if (programOfficeDocumentOwner) {
                    if (numberOfPeoples.length > 0) {
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }, 'This field is required when Program Office (Document Owner) is provided');

            $("#mainForm").validate({
                rules: {
                    // no quoting necessary
                    ctl00$MainContentPlaceHolder$tbDocketNumber: "required",
                    ctl00$MainContentPlaceHolder$tbDescription: "required",
                    ctl00$MainContentPlaceHolder$ddDocumentCategory: "required",
                    ctl00$MainContentPlaceHolder$ddFolaServiceRequired: "required",
                    ctl00$MainContentPlaceHolder$ddProgramOfficeWorkflowInitiator: "required",
                    ctl00$MainContentPlaceHolder$tbDueDate: "required",
                    ctl00$MainContentPlaceHolder$tbAlternateIdentifier: { requiredWhenNonDocketed: true, maxlength: 255 },
                    ctl00$MainContentPlaceHolder$tbInstruction: { maxlength: 255 },
                    ctl00$MainContentPlaceHolder$ddProgramOfficeDocumentOwner: {requiredWhenDocumentOwnerProvided:true},
                    ctl00$MainContentPlaceHolder$inputDocumentOwner: { requiredWhenProgramOfficeDocumentOwnerProvided: true },
                    //print req validation
                    ctl00$MainContentPlaceHolder$tbNumberofPages: {
                        required: true,
                        min: 1,
                        number: true
                    },
                    ctl00$MainContentPlaceHolder$tbNumberofCopies: {
                        required: true,
                        min: 1,
                        number: true
                    },
                }
            });


            //comment is required only when reject/recall button is clicked
            //ctl00$MainContentPlaceHolder$tbComment
            $("#btnReject,#btnRecall,#btnLegalReviewCompletedWithComment,#btnLegalReviewCompletedWithComment1").on("click", function () {
                $("#tbComment").rules("add", {
                    required: true,
                });
                $("#mainForm").valid();  // trigger the validation
            });

            $("[id^=btn]").on("click", function () {
                //only reject and recall need the comment field required 
                //so we remove the rule when other button clicked
                if ((this.id != "btnReject") && (this.id != "btnRecall") && (this.id != "btnLegalReviewCompletedWithComment") && (this.id != "btnLegalReviewCompletedWithComment1")) {
                    $("#tbComment").rules("remove");
                }

                //delete confirm - no need of client validation
                if (this.id == "btnDeleteConfirm") {
                    RemoveValidationRulesInForm();
                }

                //when upload, remove all validation rules, only SecurityControl is required 
                if (this.id == "btnUpload") {
                    RemoveValidationRulesInForm();
                    $("#ddlSecurityControl").rules("add", {
                        required: true,
                    });
                    $("#mainForm").valid();  // trigger the validation
                }
            });

            TrimValueBeforeValidatorApplied();
        }

        function SharedEditPageClientCode() {

            //register date picker
            $("#tbDueDate").datepicker({ minDate: 0 });
            //prevent user edit duedate and set value to past date
            $("#tbDueDate").keydown(function (event) { event.preventDefault(); });
            $("#tbLegalResourcesReviewCompletionDate").datepicker();
            
            jQueryValidation();

            //initialize docket and alternate identifier based on nondocket and cnf checkbox
            NonDocketCheckBox(false);
            CNFCheckBox(false);

            //Event for CNF checkbox
            $("#cbIsCNF").change(function () {
                $("#tbDocketNumber").blur();//call blur event to validate the docket number and display message
                CNFCheckBox(true);
            });

            //event for Non-Docketed checkbox
            $("#cbIsNonDocket").change(function () {
                NonDocketCheckBox(true);
                $("#tbDocketNumber").blur();//call blur event to validate the docket number and display message
            });

            //top button event, call to appropriate buttons in the bottom.
            RegisterEventForButtons();

            if (typeof (Sys) != "undefined")//Sys is created in Edit Form becuase of Ajax control only, in report, it is undefined
            {
                //this code should used in edit standard and agenda form becuase the form has citation number
                //it will fails when the code look for citation number textbox location in print req and direct pub
                if ((document.URL.indexOf("EditStandardForm.aspx") > -1) ||
                    (document.URL.indexOf("EditAgendaForm.aspx") > -1))
                    {
                    var prm = Sys.WebForms.PageRequestManager.getInstance();
                    prm.add_endRequest(function () {
                        RemoveLockScreenForAjaxUpdate(); //ajax request completed, remove the lock screen
                    });

                    prm.add_beginRequest(function () {
                        LockScreenForAjaxUpdate();
                    });
                }
                
            }


            $("#btnDelete").click(function (event) {
                event.preventDefault();
                $("#deleteDialogConfirmation").dialog({
                    buttons: {
                        "No": function (e) {
                            $(this).dialog("close");

                        },
                        "Yes": function (e) {
                            $("#btnDeleteConfirm").click();
                        }
                    }
                }, { width: 500 });
            });

            //Confirm of Publish
            $("#btnInitiatePublication").click(function (event) {
                event.preventDefault();

                //display warning if due date is future date
                var modalHeight = 100;
                //var dueDate = new Date($("#tbDueDate").attr('value'));
                var dueDate = new Date($("#tbDueDate").val());
                var today = new Date();
                if (dueDate > today) {
                    modalHeight = 250;
                    $("#publishDialogConfirmation").html("<span style='color:red'>Warning: Due Date is a future date</span>");
                }
                else {
                    $("#publishDialogConfirmation").html("");
                }

                //dialog
                $("#publishDialogConfirmation").dialog({
                    buttons: {
                        "No": function (e) {
                            $(this).dialog("close");

                        },
                        "Yes": function (e) {
                            $("#btnPublishConfirm").click();
                            $(this).dialog("close");
                        }
                    }
                }, { width: 600, height: modalHeight });
            });

            $(".historyhead").click(function () {
                $(".historylist").slideToggle(100);
            });
        }

        function RegisterEventForButtons() {

            //Top button events - call the bottom click() event
            $("#btnSave1").click(function (event) {
                event.preventDefault();
                $("#btnSave").click();
            });

            $("#btnSubmit1").click(function (event) {
                event.preventDefault();
                $("#btnSubmit").click();
            });

            $("#btnOSECTakeOwnership1").click(function (event) {
                event.preventDefault();
                $("#btnOSECTakeOwnership").click();
            });

            $("#btnSECReviewTakeOwnership1").click(function (event) {
                event.preventDefault();
                $("#btnSECReviewTakeOwnership").click();
            });

            

            $("#btnRecall1").click(function (event) {
                event.preventDefault();
                $("#btnRecall").click();
            });

            $("#btnEdit1").click(function (event) {
                event.preventDefault();
                $("#btnEdit").click();
            });

            $("#btnAccept1").click(function (event) {
                event.preventDefault();
                $("#btnAccept").click();
            });

            $("#btnReject1").click(function (event) {
                event.preventDefault();
                $("#btnReject").click();
            });

            $("#btnInitiatePublication1").click(function (event) {
                event.preventDefault();
                $("#btnInitiatePublication").click();
            });

            $("#btnDelete1").click(function (event) {
                event.preventDefault();
                $("#btnDelete").click();
            });

            $("#btnReopen1").click(function (event) {
                event.preventDefault();
                $("#btnReopen").click();
            });

            $("#btnGenerateMailingList1").click(function (event) {
                event.preventDefault();
                $("#btnGenerateMailingList").click();
            });

            $("#btnLegalReviewCompleted1").click(function (event) {
                event.preventDefault();
                $("#btnLegalReviewCompleted").click();
            });

            $("#btnLegalReviewCompletedWithComment1").click(function (event) {
                event.preventDefault();
                $("#btnLegalReviewCompletedWithComment").click();
            });

            
            //end top buttons event


            //Lock screen when buttons clicked
            $("#btnSave").click(function (event) {
                skm_LockScreen("Saving ... ");
            });


            $("#btnSubmit").click(function (event) {
                skm_LockScreen("Submitting ... ");
            });

            $("#btnOSECTakeOwnership,#btnSECReviewTakeOwnership").click(function (event) {
                skm_LockScreen("Taking Ownership ... ");
            });



            $("#btnRecall").click(function (event) {
                skm_LockScreen("Recalling ... ");
            });

            $("#btnEdit").click(function (event) {
                skm_LockScreen("Editing ... ");
            });

            $("#btnAccept").click(function (event) {
                skm_LockScreen("Accepting ... ");
            });

            $("#btnReject").click(function (event) {
                skm_LockScreen("Rejecting ... ");
            });

            $("#btnPublishConfirm").click(function (event) {
                skm_LockScreen("Publishing ... ");
            });

            $("#btnDeleteConfirm").click(function (event) {
                skm_LockScreen("Deleting ... ");
            });

            $("#btnReopen").click(function (event) {
                skm_LockScreen("ReOpening ... ");
            });


            $("#btnPrintJobComplete").click(function (event) {
                skm_LockScreen("Print Job Completed ... ");
            });

            $("#btnMailJobComplete").click(function (event) {
                skm_LockScreen("Mail Job Completed ... ");
            });


            //Note: accept ciation number and remove citation number can not used here 
            //becuase they are part of AJAX Panel. we handle them in ajax event

        }

        //used when delete button clicked or upload
        function RemoveValidationRulesInForm() {
            $("#ddlSecurityControl").rules("remove");
            $("#tbDocketNumber").rules("remove");
            $("#tbDescription").rules("remove");
            $("#ddDocumentCategory").rules("remove");
            $("#ddFolaServiceRequired").rules("remove");
            $("#ddProgramOfficeWorkflowInitiator").rules("remove");
            $("#tbDueDate").rules("remove");
            $("#tbComment").rules("remove");
            $("#tbAlternateIdentifier").rules("remove");
            $("#tbInstruction").rules("remove");
            $("#tbNumberofPages").rules("remove");
            $("#tbNumberofCopies").rules("remove");
            $("#ddProgramOfficeDocumentOwner").rules("remove");
            $("#inputDocumentOwner").rules("remove");
            
        }

        ///http://www.4guysfromrolla.com/articles/121708-1.aspx
        function skm_LockScreen(str) {
            if ($("#mainForm").valid()) {
                scroll(0, 0);
                var back = $("#skm_LockBackground");
                var pane = $("#skm_LockPane");
                var text = $("#skm_LockPaneText");

                if (back) {
                    back.addClass("LockBackground");
                }
                if (pane) {
                    pane.addClass("LockPane");
                }
                if (text) {
                    text.text(str);
                }
            }

        }

        function LockScreenForAjaxUpdate() {
            if ($("#mainForm").valid()) {
                var back = $("#skm_LockBackground");
                var pane = $("#skm_LockPane");
                var text = $("#skm_LockPaneText");

                if (back) {
                    back.addClass("LockBackground");
                }
                if (pane) {
                    pane.addClass("LockPane");
                    var citationNumberPositionTop = $("#tbCitationNumber").offset().top;
                    pane.css("padding-top", citationNumberPositionTop + "px");//display message by citation number box instead of top
                }
                if (text) {
                    text.text("Please wait ...");
                }


            }

        }

        function RemoveLockScreenForAjaxUpdate() {
            if ($("#mainForm").valid()) {
                var back = $("#skm_LockBackground");
                var pane = $("#skm_LockPane");
                var text = $("#skm_LockPaneText");

                if (back) {
                    back.removeClass("LockBackground");
                }
                if (pane) {
                    pane.removeClass("LockPane");
                    pane.css("padding-top", "");//remove manuall set location to the citation number textbox
                }
            }

        }

        function TrimValueBeforeValidatorApplied() {
            $.each($.validator.methods, function (key, value) {
                $.validator.methods[key] = function () {
                    if (arguments.length > 0) {
                        arguments[0] = $.trim(arguments[0]);
                        //var el = $(arguments[1]); 
                        //el.val($.trim(el.val‌​()));
                    }

                    return value.apply(this, arguments);
                };
            });
        }

        function NonDocketCheckBox(isCallingFromEvent) {
            var NonDocketcb = $("#cbIsNonDocket");
            var CNFcb = $("#cbIsCNF");
            if (NonDocketcb.length > 0) {
                if (NonDocketcb.is(":checked")) {
                    //disable docket number
                    $("#tbDocketNumber").prop("readonly", "readonly");
                    if (isCallingFromEvent) {
                        $("#tbDocketNumber").prop("value", "Non-Docket"); //set value if calling from event (checkbox changed)
                    }

                    //enable alternate identifier
                    $("#tbAlternateIdentifier").removeProp("readonly");

                } else {
                    //enable docket
                    $("#tbDocketNumber").removeProp("readonly");
                    if (isCallingFromEvent) {
                        $("#tbDocketNumber").prop("value", ""); //set value if calling from event (checkbox changed)
                    }


                    //disable/clear value of alternate identifier IF CNF is not checked- otherwise dont disable/clear
                    if (!CNFcb.is(":checked")) {
                        $("#tbAlternateIdentifier").prop("readonly", "readonly");
                        if (isCallingFromEvent) { //set value if calling from event (checkbox changed)
                            $("#tbAlternateIdentifier").prop("value", "");
                        }
                    }

                }
            }
        }

        function CNFCheckBox(isCallingFromEvent) {
            var NonDocketcb = $("#cbIsNonDocket");
            var CNFcb = $("#cbIsCNF");
            if (CNFcb.length > 0) {
                if (CNFcb.is(":checked")) {
                    //enable alternate identifier
                    $("#tbAlternateIdentifier").removeProp("readonly");
                } else {
                    //disable/clear value of alternate identifier IF nondocket is not checked ()
                    if (!NonDocketcb.is(":checked")) {
                        $("#tbAlternateIdentifier").prop("readonly", "readonly");
                        if (isCallingFromEvent) { //set value if calling from event (checkbox changed)
                            $("#tbAlternateIdentifier").prop("value", "");
                        }
                    }
                }
            }
        }

    </script>
</body>
</html>
